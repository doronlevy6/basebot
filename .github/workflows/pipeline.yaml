name: "CI/CD Pipeline"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

concurrency:
  group: pipeline-basebot-${{ github.ref }}
  cancel-in-progress: true

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "npm"
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-base-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-base-${{ hashFiles('**/package-lock.json') }}
            npm-base-
            npm-
      - name: NPM CI
        run: npm ci
      - name: Format
        run: |
          npm run format
          diff=$(git diff --color)

          if [[ -z "${diff}" ]]; then
          printf "\e[32m%s\e[0m\n" \
            "Code is all formatted!"
          else
            echo "${diff}"
            printf "\n\e[31m%s\e[0m\n\n%s\n" \
              "Code is not formatted!" \
              'Run `npm run format` to format it.'
            exit 1
          fi
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "npm"
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-base-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-base-${{ hashFiles('**/package-lock.json') }}
            npm-base-
            npm-
      - name: NPM CI
        run: npm ci
      - name: Lint
        run: |
          npm run lint
          diff=$(git diff --color)

          if [[ -z "${diff}" ]]; then
          printf "\e[32m%s\e[0m\n" \
            "Code is all linted!"
          else
            echo "${diff}"
            printf "\n\e[31m%s\e[0m\n\n%s\n" \
              "Code is not linted!" \
              'Run `npm run lint` to lint it.'
            exit 1
          fi
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "npm"
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-base-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-base-${{ hashFiles('**/package-lock.json') }}
            npm-base-
            npm-
      - name: NPM CI
        run: npm ci
      - name: Test
        run: npm run test
  build-deps-docker:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        name: Checkout
        if: github.ref == 'refs/heads/main'
      - uses: dorny/paths-filter@v2
        if: github.ref == 'refs/heads/main'
        id: filter
        with:
          filters: |
            deps:
              - 'package-lock.json'
      # run only if 'package-lock.json' file was changed
      - name: Set up Docker Buildx
        if: steps.filter.outputs.deps == 'true' && github.ref == 'refs/heads/main'
        id: buildx
        with:
          install: true
        uses: docker/setup-buildx-action@v2
      - name: Configure AWS Credentials
        if: steps.filter.outputs.deps == 'true' && github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::221762091942:role/GitHubRoleBasebot
          role-session-name: BasebotCICD
      - name: Login to Amazon ECR
        if: steps.filter.outputs.deps == 'true' && github.ref == 'refs/heads/main'
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      - name: Versioning
        if: steps.filter.outputs.deps == 'true' && github.ref == 'refs/heads/main'
        env:
          TAG: ${{ github.sha }}
          VERSION: ${{ github.sha }}
        run: printf "DEPS_VERSION=$VERSION\nDEPS_TAG=$TAG" >> deps_versions.env
      - name: Reset Multiarch Container
        if: steps.filter.outputs.deps == 'true' && github.ref == 'refs/heads/main'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Build Image
        if: steps.filter.outputs.deps == 'true' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v3
        with:
          context: ./
          file: ./build/Dockerfile.deps
          push: true
          # For now, we use the `latest` tag since that should be the latest last dependency update.
          # In the future we can try to calculate the last hash (maybe by checking the last built commit)
          # and then pull from that one.
          build-args: |
            STARTING_DEPS_HASH_VERSION=latest
          tags: |
            ${{ steps.ecr-login.outputs.registry }}/custom-basebot-base:latest
            ${{ steps.ecr-login.outputs.registry }}/custom-basebot-base:${{ github.sha }}
            ${{ steps.ecr-login.outputs.registry }}/custom-basebot-base:${{ hashFiles('package-lock.json') }}
          platforms: |
            linux/amd64
            linux/arm64
  docker-build-and-push-to-staging:
    needs: [format, lint, test, build-deps-docker]
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        service: [slackbot, gistbot, treasury]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/main'
        id: buildx
        with:
          install: true
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "npm"
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-base-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-base-${{ hashFiles('**/package-lock.json') }}
            npm-base-
            npm-
      - name: Configure AWS Credentials
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::221762091942:role/GitHubRoleBasebot
          role-session-name: BasebotCICD
      - name: Download Secrets from S3
        if: github.ref == 'refs/heads/main'
        run: npm run secrets:read
      - name: Login to Amazon ECR
        if: github.ref == 'refs/heads/main'
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      - name: Versioning
        env:
          TAG: ${{ github.sha }}
          VERSION: ${{ github.sha }}
        run: printf "VERSION=$VERSION\nTAG=$TAG" >> versions.env
      - name: NPM CI
        run: npm ci
      - name: NPM Build
        run: npm run build ${{ matrix.service }}
      - name: Reset Multiarch Container
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Build Image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v3
        with:
          context: ./
          file: ./build/Dockerfile
          push: true
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
            DEPS_HASH_VERSION=${{ hashFiles('package-lock.json') }}
          tags: |
            ${{ steps.ecr-login.outputs.registry }}/${{ matrix.service }}:latest
            ${{ steps.ecr-login.outputs.registry }}/${{ matrix.service }}:stg
            ${{ steps.ecr-login.outputs.registry }}/${{ matrix.service }}:${{ github.sha }}
          platforms: |
            linux/amd64
            linux/arm64
